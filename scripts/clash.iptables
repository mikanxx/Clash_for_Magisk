#!/system/bin/sh

scripts=`realpath $0`
scripts_dir=`dirname ${scripts}`
. /data/clash/clash.config

start_tproxy() {
    ip rule add fwmark ${mark_id} table ${mark_id}
    ip route add local default dev lo table ${mark_id}

    if [ "${ipv6}" == "true" ]
    then
        ip -6 rule add fwmark ${mark_id} table ${mark_id}
        ip -6 route add local default dev lo table ${mark_id}
    fi

    ${iptables_wait} -t mangle -N CLASH_EXTERNAL
    ${iptables_wait} -t mangle -F CLASH_EXTERNAL

    if [ "${ipv6}" == "true" ]
    then
        ${ip6tables_wait} -t mangle -N CLASH_EXTERNAL
        ${ip6tables_wait} -t mangle -F CLASH_EXTERNAL
    fi

    for subnet in ${reserved_ip[*]} ; do
        ${iptables_wait} -t mangle -A CLASH_EXTERNAL -d ${subnet} -j RETURN
    done

    if [ "${ipv6}" == "true" ]
    then
        for subnet in ${reserved_ip6[*]} ; do
            ${ip6tables_wait} -t mangle -A CLASH_EXTERNAL -d ${subnet} -j RETURN
        done
    fi

    ${iptables_wait} -t mangle -A CLASH_EXTERNAL -p tcp -j TPROXY --on-ip 127.0.0.1 --on-port ${Clash_tproxy_port} --tproxy-mark ${mark_id}
    ${iptables_wait} -t mangle -A CLASH_EXTERNAL -p udp -j TPROXY --on-ip 127.0.0.1 --on-port ${Clash_tproxy_port} --tproxy-mark ${mark_id}

    if [ "${ipv6}" == "true" ]
    then
        ${ip6tables_wait} -t mangle -A CLASH_EXTERNAL -p tcp -j TPROXY --on-ip ::1 --on-port ${Clash_tproxy_port} --tproxy-mark ${mark_id}
        ${ip6tables_wait} -t mangle -A CLASH_EXTERNAL -p udp -j TPROXY --on-ip ::1 --on-port ${Clash_tproxy_port} --tproxy-mark ${mark_id}
    fi

    ${iptables_wait} -t mangle -A PREROUTING -j CLASH_EXTERNAL

    if [ "${ipv6}" == "true" ]
    then
        ${ip6tables_wait} -t mangle -A PREROUTING -j CLASH_EXTERNAL
    fi

    ${iptables_wait} -t mangle -N CLASH_LOCAL
    ${iptables_wait} -t mangle -F CLASH_LOCAL

    if [ "${ipv6}" == "true" ]
    then
        ${ip6tables_wait} -t mangle -N CLASH_LOCAL
        ${ip6tables_wait} -t mangle -F CLASH_LOCAL
    fi

    ${iptables_wait} -t mangle -A CLASH_LOCAL -m owner --uid-owner 0 --gid-owner 3005 -j RETURN

    if [ "${ipv6}" == "true" ]
    then
        ${ip6tables_wait} -t mangle -A CLASH_LOCAL -m owner --uid-owner 0 --gid-owner 3005 -j RETURN
    fi

    for subnet in ${reserved_ip[*]} ; do
        ${iptables_wait} -t mangle -A CLASH_LOCAL -d ${subnet} -j RETURN
    done
    if [ "${ipv6}" == "true" ]
    then
        for subnet in ${reserved_ip6[*]} ; do
            ${ip6tables_wait} -t mangle -A CLASH_LOCAL -d ${subnet} -j RETURN
        done
    fi

    # bypass apps
    ${scripts_dir}/clash.tool -f
    AID=`cat ${appuid_file} | sort -u`
    for appuid in ${AID[*]} ; do
        ${iptables_wait} -t mangle -A CLASH_LOCAL -m owner --gid-owner ${appuid} -j RETURN
    done

    if [ "${ipv6}" == "true" ]
    then
        AID=`cat ${appuid_file} | sort -u`
        for appuid in ${AID[*]} ; do
            ${ip6tables_wait} -t mangle -A CLASH_LOCAL -m owner --gid-owner ${appuid} -j RETURN
        done
    fi

    ${iptables_wait} -t mangle -A CLASH_LOCAL -p tcp -j MARK --set-mark ${mark_id}
    ${iptables_wait} -t mangle -A CLASH_LOCAL -p udp -j MARK --set-mark ${mark_id}

    if [ "${ipv6}" == "true" ]
    then
        ${ip6tables_wait} -t mangle -A CLASH_LOCAL -p tcp -j MARK --set-mark ${mark_id}
        ${ip6tables_wait} -t mangle -A CLASH_LOCAL -p udp -j MARK --set-mark ${mark_id}
    fi

    ${iptables_wait} -t mangle -A OUTPUT -j CLASH_LOCAL
 
    if [ "${ipv6}" == "true" ]
    then
        ${ip6tables_wait} -t mangle -A OUTPUT -j CLASH_LOCAL
    fi

    ${iptables_wait} -t mangle -N DIVERT
    ${iptables_wait} -t mangle -F DIVERT
    ${iptables_wait} -t mangle -A DIVERT -j MARK --set-mark ${mark_id}
    ${iptables_wait} -t mangle -A DIVERT -j ACCEPT
    ${iptables_wait} -t mangle -I PREROUTING -p tcp -m socket -j DIVERT

    if [ "${ipv6}" == "true" ]
    then
        ${ip6tables_wait} -t mangle -N DIVERT
        ${ip6tables_wait} -t mangle -F DIVERT
        ${ip6tables_wait} -t mangle -A DIVERT -j MARK --set-mark ${mark_id}
        ${ip6tables_wait} -t mangle -A DIVERT -j ACCEPT
        ${ip6tables_wait} -t mangle -I PREROUTING -p tcp -m socket -j DIVERT
    fi

    ${iptables_wait} -t nat -N CLASH_DNS_EXTERNAL
    ${iptables_wait} -t nat -F CLASH_DNS_EXTERNAL
 
    if [ "${ipv6}" == "true" ]
    then
        if [ "${nat_kernel}" == "true" ]
        then
            ${ip6tables_wait} -t nat -N CLASH_DNS_EXTERNAL
            ${ip6tables_wait} -t nat -F CLASH_DNS_EXTERNAL
        fi
    fi

    ${iptables_wait} -t nat -A CLASH_DNS_EXTERNAL -p tcp --dport 53 -j REDIRECT --to-ports ${Clash_dns_port}
    ${iptables_wait} -t nat -A CLASH_DNS_EXTERNAL -p udp --dport 53 -j REDIRECT --to-ports ${Clash_dns_port}
    ${iptables_wait} -t nat -A PREROUTING -j CLASH_DNS_EXTERNAL

    if [ "${ipv6}" == "true" ]
    then
        if [ "${nat_kernel}" == "true" ]
        then
            ${ip6tables_wait} -t nat -A CLASH_DNS_EXTERNAL -p tcp --dport 53 -j REDIRECT --to-ports ${Clash_dns_port}
            ${ip6tables_wait} -t nat -A CLASH_DNS_EXTERNAL -p udp --dport 53 -j REDIRECT --to-ports ${Clash_dns_port}
            ${ip6tables_wait} -t nat -A PREROUTING -j CLASH_DNS_EXTERNAL
        fi
    fi

    ${iptables_wait} -t nat -N CLASH_DNS_LOCAL
    ${iptables_wait} -t nat -F CLASH_DNS_LOCAL

    if [ "${ipv6}" == "true" ]
    then
        if [ "${nat_kernel}" == "true" ]
        then
            ${ip6tables_wait} -t nat -N CLASH_DNS_LOCAL
            ${ip6tables_wait} -t nat -F CLASH_DNS_LOCAL
        fi
    fi

    ${iptables_wait} -t nat -A CLASH_DNS_LOCAL -m owner --uid-owner 0 --gid-owner 3005 -j RETURN
    if [ "${ipv6}" == "true" ]
    then
        if [ "${nat_kernel}" == "true" ]
        then
            ${ip6tables_wait} -t nat -A CLASH_DNS_LOCAL -m owner --uid-owner 0 --gid-owner 3005 -j RETURN
        fi
    fi

    ${iptables_wait} -t nat -A CLASH_DNS_LOCAL -p tcp --dport 53 -j REDIRECT --to-ports ${Clash_dns_port}
    ${iptables_wait} -t nat -A CLASH_DNS_LOCAL -p udp --dport 53 -j REDIRECT --to-ports ${Clash_dns_port}
    ${iptables_wait} -t nat -A OUTPUT -j CLASH_DNS_LOCAL

    if [ "${ipv6}" == "true" ]
    then
        if [ "${nat_kernel}" == "true" ]
        then
            ${ip6tables_wait} -t nat -A CLASH_DNS_LOCAL -p tcp --dport 53 -j REDIRECT --to-ports ${Clash_dns_port}
            ${ip6tables_wait} -t nat -A CLASH_DNS_LOCAL -p udp --dport 53 -j REDIRECT --to-ports ${Clash_dns_port}

            ${ip6tables_wait} -t nat -A OUTPUT -j CLASH_DNS_LOCAL
        fi
    else
        ${ip6tables_wait} -I OUTPUT -p udp --dport 53 -j DROP
    fi
}

stop_tproxy() {
    ip rule del fwmark ${mark_id} table ${mark_id}
    ip route del local default dev lo table ${mark_id}
    if [ "${ipv6}" == "true" ]
    then
        ip -6 rule del fwmark ${mark_id} table ${mark_id}
        ip -6 route del local default dev lo table ${mark_id}
    fi

    ${iptables_wait} -t nat -D PREROUTING -j CLASH_DNS_EXTERNAL
    ${iptables_wait} -t nat -D OUTPUT -j CLASH_DNS_LOCAL
    ${iptables_wait} -t nat -F CLASH_DNS_EXTERNAL
    ${iptables_wait} -t nat -X CLASH_DNS_EXTERNAL
    ${iptables_wait} -t nat -F CLASH_DNS_LOCAL
    ${iptables_wait} -t nat -X CLASH_DNS_LOCAL

    if [ "${ipv6}" == "true" ]
    then
        if [ "${nat_kernel}" == "true" ]
        then
            ${ip6tables_wait} -t nat -D PREROUTING -j CLASH_DNS_EXTERNAL
            ${ip6tables_wait} -t nat -D OUTPUT -j CLASH_DNS_LOCAL
            ${ip6tables_wait} -t nat -F CLASH_DNS_EXTERNAL
            ${ip6tables_wait} -t nat -X CLASH_DNS_EXTERNAL
            ${ip6tables_wait} -t nat -F CLASH_DNS_LOCAL
            ${ip6tables_wait} -t nat -X CLASH_DNS_LOCAL
        fi
    fi

    ${iptables_wait} -t mangle -D PREROUTING -j CLASH_EXTERNAL
    ${iptables_wait} -t mangle -D PREROUTING -p tcp -m socket -j DIVERT
    ${iptables_wait} -t mangle -D OUTPUT -j CLASH_LOCAL
    ${iptables_wait} -t mangle -F CLASH_EXTERNAL
    ${iptables_wait} -t mangle -X CLASH_EXTERNAL
    ${iptables_wait} -t mangle -F CLASH_LOCAL
    ${iptables_wait} -t mangle -X CLASH_LOCAL
    ${iptables_wait} -t mangle -F DIVERT
    ${iptables_wait} -t mangle -X DIVERT
    if [ "${ipv6}" == "true" ]
    then
        ${ip6tables_wait} -t mangle -D PREROUTING -j CLASH_EXTERNAL
        ${ip6tables_wait} -t mangle -D PREROUTING -p tcp -m socket -j DIVERT
        ${ip6tables_wait} -t mangle -D OUTPUT -j CLASH_LOCAL
        ${ip6tables_wait} -t mangle -F CLASH_EXTERNAL
        ${ip6tables_wait} -t mangle -X CLASH_EXTERNAL
        ${ip6tables_wait} -t mangle -F CLASH_LOCAL
        ${ip6tables_wait} -t mangle -X CLASH_LOCAL
        ${ip6tables_wait} -t mangle -F DIVERT
        ${ip6tables_wait} -t mangle -X DIVERT
    fi
}

stop_tun(){
    ${iptables_wait} -D FORWARD -o ${tun_device} -j ACCEPT
    ${iptables_wait} -D FORWARD -i ${tun_device} -j ACCEPT
        if [ "${ipv6}" = "true" ]
        then
            ${ip6tables_wait} -D FORWARD -o ${tun_device} -j ACCEPT
            ${ip6tables_wait} -D FORWARD -i ${tun_device} -j ACCEPT
        fi
}

start_tun(){
    ${iptables_wait} -I FORWARD -o ${tun_device} -j ACCEPT
    ${iptables_wait} -I FORWARD -i ${tun_device} -j ACCEPT
        if [ "${ipv6}" = "true" ]
        then
            ${ip6tables_wait} -I FORWARD -o ${tun_device} -j ACCEPT
            ${ip6tables_wait} -I FORWARD -i ${tun_device} -j ACCEPT
        fi
}

detected_port() {
    sleep 1
    if [ "${port_detect}" == "true" ]
    then
        if ! (${scripts_dir}/clash.tool -p)
        then
            exit 0
        fi
    else
        echo $date_log"info: Skip!! port detectedã€‚" >> ${CFM_logs_file}
    fi
}

while getopts ":sk" signal ; do
    case ${signal} in
        s)
           if [ "${Clash_tun_status}" == "false" ]
           then
               stop_tproxy
               start_tproxy
               echo $date_log"info: tproxy server listening at: [::]:$Clash_tproxy_port" >> ${CFM_logs_file}
           else
               stop_tun
               start_tun
               echo $date_log"info: TUN stack listening" >> ${CFM_logs_file}
           fi
           ${scripts_dir}/clash.tool -v && detected_port
           echo $date_log"info: Clash service is running (PID: `cat ${Clash_pid_file}`)" >> ${CFM_logs_file}
           ;;
        k)
            if [ "${Clash_tun_status}" == "false" ]
            then
                stop_tproxy
                echo $date_log"warn: flush rules Iptables" >> ${CFM_logs_file}
            else
                stop_tun
                echo $date_log"warn: flush rules Tun," >> ${CFM_logs_file}
            fi
            ;;
        ?)
            echo ""
            ;;
    esac
done
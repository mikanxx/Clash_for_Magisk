#!/system/bin/sh

scripts=$(realpath $0)
scripts_dir=$(dirname ${scripts})
source /data/clash/clash.config

forward() {
  ${iptables_wait} $1 FORWARD -o ${tun_device} -j ACCEPT
  ${iptables_wait} $1 FORWARD -i ${tun_device} -j ACCEPT
}

start_redirect() {
  ${iptables_wait} -t nat -N BOX_EXTERNAL
  ${iptables_wait} -t nat -F BOX_EXTERNAL
  ${iptables_wait} -t nat -N BOX_LOCAL
  ${iptables_wait} -t nat -F BOX_LOCAL

  if [ "${Clash_bin_name}" == "clash" ] ; then
    ${iptables_wait} -t nat -A BOX_EXTERNAL -p udp --dport 53 -j REDIRECT --to-ports ${Clash_dns_port}
    ${iptables_wait} -t nat -A BOX_LOCAL -p udp --dport 53 -j REDIRECT --to-ports ${Clash_dns_port}
    ${iptables_wait} -t nat -A BOX_EXTERNAL -d ${Clash_fake_ip_range} -p icmp -j DNAT --to-destination 127.0.0.1
    ${iptables_wait} -t nat -A BOX_LOCAL -d ${Clash_fake_ip_range} -p icmp -j DNAT --to-destination 127.0.0.1
    #  else
    #    Other types of inbound should be added here to receive DNS traffic instead of sniffing
    #    ${iptables_wait} -t nat -A BOX_EXTERNAL -p udp --dport 53 -j REDIRECT --to-ports ${Clash_redir_port}
    #    ${iptables_wait} -t nat -A BOX_LOCAL -p udp --dport 53 -j REDIRECT --to-ports ${Clash_redir_port}
  fi

  for subnet in ${reserved_ip[@]} ; do
    ${iptables_wait} -t nat -A BOX_EXTERNAL -d ${subnet} -j RETURN
    ${iptables_wait} -t nat -A BOX_LOCAL -d ${subnet} -j RETURN
  done

  ${iptables_wait} -t nat -A BOX_EXTERNAL -p tcp -i lo -j REDIRECT --to-ports ${Clash_redir_port}

  for ap in ${ap_list[@]} ; do
    ${iptables_wait} -t nat -A BOX_EXTERNAL -p tcp -i ${ap} -j REDIRECT --to-ports ${Clash_redir_port}
  done

  ${iptables_wait} -t nat -I PREROUTING -j BOX_EXTERNAL

  ${iptables_wait} -t nat -I BOX_LOCAL -m owner --uid-owner 0 --gid-owner 3005 -j RETURN
  for ignore in ${ignore_out_list[@]} ; do
    ${iptables_wait} -t nat -I BOX_LOCAL -o ${ignore} -j RETURN
  done

  if [ "${mode}" = "blacklist" ] ; then
    if [ "$(cat ${filter_packages_file[@]})" = "" ] ; then
      # Route Everything
      ${iptables_wait} -t nat -A BOX_LOCAL -p tcp -j REDIRECT --to-ports ${Clash_redir_port}
      log "[info] transparent proxy for all apps."
    else
      # Bypass apps
      for appid in $(cat ${appuid_file[@]}) ; do
        ${iptables_wait} -t nat -I BOX_LOCAL -m owner --uid-owner ${appid} -j RETURN
      done
      # Allow !app
      ${iptables_wait} -t nat -A BOX_LOCAL -p tcp -j REDIRECT --to-ports ${Clash_redir_port}
      logs "[info] proxy mode: ${mode} "
      for package in $(cat ${filter_packages_file[@]}) ; do
        echo -n "${package} / " >> ${CFM_logs_file}
      done
      echo "has no transparent proxy." >> ${CFM_logs_file}
      # log "[info] proxy mode: ${mode} $(cat ${filter_packages_file[@]}) has no transparent proxy."
    fi
  elif [ "${mode}" = "whitelist" ] ; then
    # Route apps to Box
    for appid in $(cat ${appuid_file[@]}) ; do
      ${iptables_wait} -t nat -A BOX_LOCAL -p tcp -m owner --uid-owner ${appid} -j REDIRECT --to-ports ${Clash_redir_port}
    done
    ${iptables_wait} -t nat -A BOX_LOCAL -p tcp -m owner --uid-owner 0 -j REDIRECT --to-ports ${Clash_redir_port}
    ${iptables_wait} -t nat -A BOX_LOCAL -p tcp -m owner --uid-owner 1052 -j REDIRECT --to-ports ${Clash_redir_port}
    logs "[info] proxy mode: ${mode} "
    for package in $(cat ${filter_packages_file[@]}) ; do
      echo -n "${package} / " >> ${CFM_logs_file}
    done
    echo "transparent proxy." >> ${CFM_logs_file}
    # log "proxy mode: ${mode} $(cat ${filter_packages_file[@]}) transparent proxy."
  fi

  ${iptables_wait} -t nat -I OUTPUT -j BOX_LOCAL
  ${iptables_wait} -A OUTPUT -d 127.0.0.1 -p tcp -m owner --uid-owner 0 --gid-owner 3005 -m tcp --dport ${Clash_redir_port} -j REJECT
}

stop_redirect() {
  ${iptables_wait} -t nat -D PREROUTING -j BOX_EXTERNAL

  ${iptables_wait} -t nat -D OUTPUT -j BOX_LOCAL
  ${iptables_wait} -D OUTPUT -d 127.0.0.1 -p tcp -m owner --uid-owner 0 --gid-owner 3005 -m tcp --dport ${Clash_redir_port} -j REJECT

  ${iptables_wait} -t nat -F BOX_EXTERNAL
  ${iptables_wait} -t nat -X BOX_EXTERNAL
  ${iptables_wait} -t nat -F BOX_LOCAL
  ${iptables_wait} -t nat -X BOX_LOCAL
}

start_tproxy() {
  # 路由规则
  ip rule add fwmark ${mark_id} lookup ${mark_id}
  ip route add local default dev lo table ${mark_id}
  ip -6 rule add fwmark ${mark_id} lookup ${mark_id}
  ip -6 route add local default dev lo table ${mark_id}

  # CLASH_EXTERNAL 链负责处理转发流量
  ${iptables_wait} -t mangle -N CLASH_EXTERNAL
  ${iptables_wait} -t mangle -F CLASH_EXTERNAL
  ${ip6tables_wait} -t mangle -N CLASH_EXTERNAL
  ${ip6tables_wait} -t mangle -F CLASH_EXTERNAL

  # 跳过标记为 ${routing_mark} 的 Clash 的本身流量防止回环(安卓环境下不建议)
  # ${iptables_wait} -t mangle -A CLASH_EXTERNAL -j RETURN -m mark --mark ${routing_mark}

  # 绕过其它
  # Notice: Some interface is named with r_ / oem / nm_ / qcom_
  # It might need more complicated solution.
  ${iptables_wait} -t mangle -I CLASH_EXTERNAL -i rmnet_data+ -j RETURN
  ${iptables_wait} -t mangle -I CLASH_EXTERNAL -i ccmni+ -j RETURN
  ${ip6tables_wait} -t mangle -I CLASH_EXTERNAL -i rmnet_data+ -j RETURN
  ${ip6tables_wait} -t mangle -I CLASH_EXTERNAL -i ccmni+ -j RETURN

  # 目标地址为局域网或保留地址的流量跳过处理
    for subnet in ${reserved_ip[@]} ; do
      ${iptables_wait} -t mangle -A CLASH_EXTERNAL -d ${subnet} -j RETURN
    done
    for subnet in ${reserved_ip6[@]} ; do
      ${ip6tables_wait} -t mangle -A CLASH_EXTERNAL -d ${subnet} -j RETURN
    done

  # 其他所有流量转向到 ${tproxy_port} 端口，并打上 mark
  ${iptables_wait} -t mangle -A CLASH_EXTERNAL -p tcp -i lo -j TPROXY --on-port ${Clash_tproxy_port} --tproxy-mark ${mark_id}
  ${iptables_wait} -t mangle -A CLASH_EXTERNAL -p udp -i lo -j TPROXY --on-port ${Clash_tproxy_port} --tproxy-mark ${mark_id}
  ${ip6tables_wait} -t mangle -A CLASH_EXTERNAL -p tcp -i lo -j TPROXY --on-port ${Clash_tproxy_port} --tproxy-mark ${mark_id}
  ${ip6tables_wait} -t mangle -A CLASH_EXTERNAL -p udp -i lo -j TPROXY --on-port ${Clash_tproxy_port} --tproxy-mark ${mark_id}

  # 允许AP接口
  # Notice: Old android device may only have one wlan interface.
  # Some new android device have multiple wlan interface like wlan0(for internet), wlan1(for AP).
  for ap in ${ap_list[@]} ; do
    ${iptables_wait} -t mangle -A CLASH_EXTERNAL -p tcp -i ${ap} -j TPROXY --on-port ${Clash_tproxy_port} --tproxy-mark ${mark_id}
    ${iptables_wait} -t mangle -A CLASH_EXTERNAL -p udp -i ${ap} -j TPROXY --on-port ${Clash_tproxy_port} --tproxy-mark ${mark_id}
    ${ip6tables_wait} -t mangle -A CLASH_EXTERNAL -p tcp -i ${ap} -j TPROXY --on-port ${Clash_tproxy_port} --tproxy-mark ${mark_id}
    ${ip6tables_wait} -t mangle -A CLASH_EXTERNAL -p udp -i ${ap} -j TPROXY --on-port ${Clash_tproxy_port} --tproxy-mark ${mark_id}
  done

  # 最后让所有流量通过 CLASH_EXTERNAL 链进行处理
  ${iptables_wait} -t mangle -I PREROUTING -j CLASH_EXTERNAL
  ${ip6tables_wait} -t mangle -I PREROUTING -j CLASH_EXTERNAL

  # CLASH_LOCAL 链负责处理本机发出的流量
  ${iptables_wait} -t mangle -N CLASH_LOCAL
  ${iptables_wait} -t mangle -F CLASH_LOCAL
  ${ip6tables_wait} -t mangle -N CLASH_LOCAL
  ${ip6tables_wait} -t mangle -F CLASH_LOCAL

  # 绕过已忽略接口
  for ignore in ${ignore_out_list[@]} ; do
    ${iptables_wait} -t mangle -I CLASH_LOCAL -o ${ignore} -j RETURN
    ${ip6tables_wait} -t mangle -I CLASH_LOCAL -o ${ignore} -j RETURN
  done

  # 绕过保留地址
    for subnet in ${reserved_ip[@]} ; do
      ${iptables_wait} -t mangle -A CLASH_LOCAL -d ${subnet} -j RETURN
      ${ip6tables_wait} -t mangle -A CLASH_LOCAL -d ${subnet} -j RETURN
    done

  # 跳过 Clash 程序本身发出的流量, 防止回环
  ${iptables_wait} -t mangle -I CLASH_LOCAL -m owner --uid-owner 0 --gid-owner 3005 -j RETURN
  ${ip6tables_wait} -t mangle -I CLASH_LOCAL -m owner --uid-owner 0 --gid-owner 3005 -j RETURN

  if [ "${mode}" = "blacklist" ] ; then
    if [ "$(cat ${filter_packages_file[@]})" = "" ] ; then
      # 全部通过路由
      ${iptables_wait} -t mangle -A CLASH_LOCAL -p tcp -j MARK --set-mark ${mark_id}
      ${iptables_wait} -t mangle -A CLASH_LOCAL -p udp -j MARK --set-mark ${mark_id}
      ${ip6tables_wait} -t mangle -A CLASH_LOCAL -p tcp -j MARK --set-mark ${mark_id}
      ${ip6tables_wait} -t mangle -A CLASH_LOCAL -p udp -j MARK --set-mark ${mark_id}
      log "[info] transparent proxy for all apps."
    else
      # 绕过App
      for appid in $(cat ${appuid_file[@]}) ; do
        ${iptables_wait} -t mangle -I CLASH_LOCAL -m owner --uid-owner ${appid} -j RETURN
        ${ip6tables_wait} -t mangle -I CLASH_LOCAL -m owner --uid-owner ${appid} -j RETURN
      done
      # 允许非App
      ${iptables_wait} -t mangle -A CLASH_LOCAL -p tcp -j MARK --set-mark ${mark_id}
      ${iptables_wait} -t mangle -A CLASH_LOCAL -p udp -j MARK --set-mark ${mark_id}
      ${ip6tables_wait} -t mangle -A CLASH_LOCAL -p tcp -j MARK --set-mark ${mark_id}
      ${ip6tables_wait} -t mangle -A CLASH_LOCAL -p udp -j MARK --set-mark ${mark_id}
      logs "[info] proxy mode: ${mode} "
      for package in $(cat ${filter_packages_file[@]}) ; do
        echo -n "${package} / " >> ${CFM_logs_file}
      done
      echo "has no transparent proxy." >> ${CFM_logs_file}
    # log "[info] proxy mode: ${mode} $(cat ${filter_packages_file[@]}) has no transparent proxy."
    fi
  elif [ "${mode}" = "whitelist" ] ; then
    # Route apps to Box
    for appid in $(cat ${appuid_file[@]}) ; do
      ${iptables_wait} -t mangle -A CLASH_LOCAL -p tcp -m owner --uid-owner ${appid} -j MARK --set-mark ${mark_id}
      ${iptables_wait} -t mangle -A CLASH_LOCAL -p udp -m owner --uid-owner ${appid} -j MARK --set-mark ${mark_id}
      ${ip6tables_wait} -t mangle -A CLASH_LOCAL -p tcp -m owner --uid-owner ${appid} -j MARK --set-mark ${mark_id}
      ${ip6tables_wait} -t mangle -A CLASH_LOCAL -p udp -m owner --uid-owner ${appid} -j MARK --set-mark ${mark_id}
    done
    ${iptables_wait} -t mangle -A CLASH_LOCAL -p tcp -m owner --uid-owner 0 -j MARK --set-mark ${mark_id}
    ${iptables_wait} -t mangle -A CLASH_LOCAL -p udp -m owner --uid-owner 0 -j MARK --set-mark ${mark_id}
    ${iptables_wait} -t mangle -A CLASH_LOCAL -p tcp -m owner --uid-owner 1052 -j MARK --set-mark ${mark_id}
    ${iptables_wait} -t mangle -A CLASH_LOCAL -p udp -m owner --uid-owner 1052 -j MARK --set-mark ${mark_id}
    ${ip6tables_wait} -t mangle -A CLASH_LOCAL -p tcp -m owner --uid-owner 0 -j MARK --set-mark ${mark_id}
    ${ip6tables_wait} -t mangle -A CLASH_LOCAL -p udp -m owner --uid-owner 0 -j MARK --set-mark ${mark_id}
    ${ip6tables_wait} -t mangle -A CLASH_LOCAL -p tcp -m owner --uid-owner 1052 -j MARK --set-mark ${mark_id}
    ${ip6tables_wait} -t mangle -A CLASH_LOCAL -p udp -m owner --uid-owner 1052 -j MARK --set-mark ${mark_id}
    logs "[info] proxy mode: ${mode} "
    for package in $(cat ${filter_packages_file[@]}) ; do
      echo -n "${package} / " >> ${CFM_logs_file}
    done
    echo "transparent proxy." >> ${CFM_logs_file}
  fi

  # 让本机发出的流量跳转到 CLASH_LOCAL
  # CLASH_LOCAL 链会为本机流量打 mark, 打过 mark 的流量会重新回到 PREROUTING 链上
  ${iptables_wait} -t mangle -I OUTPUT -j CLASH_LOCAL
  ${ip6tables_wait} -t mangle -I OUTPUT -j CLASH_LOCAL

  # 新建 DIVERT 规则，避免已有连接的包二次通过 TPROXY，理论上有一定的性能提升
  ${iptables_wait} -t mangle -N DIVERT
  ${iptables_wait} -t mangle -F DIVERT
  ${ip6tables_wait} -t mangle -N DIVERT
  ${ip6tables_wait} -t mangle -F DIVERT

  ${iptables_wait} -t mangle -A DIVERT -j MARK --set-mark ${mark_id}
  ${iptables_wait} -t mangle -A DIVERT -j ACCEPT
  ${ip6tables_wait} -t mangle -A DIVERT -j MARK --set-mark ${mark_id}
  ${ip6tables_wait} -t mangle -A DIVERT -j ACCEPT

  ${iptables_wait} -t mangle -I PREROUTING -p tcp -m socket -j DIVERT
  ${ip6tables_wait} -t mangle -I PREROUTING -p tcp -m socket -j DIVERT

  # This rule blocks local access to tproxy-port to prevent traffic loopback.
  ${iptables_wait} -A OUTPUT -d 127.0.0.1 -p tcp -m owner --uid-owner 0 --gid-owner 3005 -m tcp --dport ${Clash_tproxy_port} -j REJECT
  ${ip6tables_wait} -A OUTPUT -d ::1 -p tcp -m owner --uid-owner 0 --gid-owner 3005 -m tcp --dport ${Clash_tproxy_port} -j REJECT

    # CLASH_DNS_EXTERNAL 链负责处理转发 DNS 流量
    ${iptables_wait} -t nat -N CLASH_DNS_EXTERNAL
    ${iptables_wait} -t nat -F CLASH_DNS_EXTERNAL

    # 转发系统 53 端口至 Clash ${dns_port}
    ${iptables_wait} -t nat -A CLASH_DNS_EXTERNAL -p udp --dport 53 -j REDIRECT --to-ports ${Clash_dns_port}

    ${iptables_wait} -t nat -I PREROUTING -j CLASH_DNS_EXTERNAL

    ${iptables_wait} -t nat -N CLASH_DNS_LOCAL
    ${iptables_wait} -t nat -F CLASH_DNS_LOCAL
    ${iptables_wait} -t nat -A CLASH_DNS_LOCAL -m owner --uid-owner 0 --gid-owner 3005 -j RETURN
    ${iptables_wait} -t nat -A CLASH_DNS_LOCAL -p udp --dport 53 -j REDIRECT --to-ports ${Clash_dns_port}

    ${iptables_wait} -t nat -I OUTPUT -j CLASH_DNS_LOCAL

    # Fix ICMP (ping), this does not guarantee that the ping result is valid (proxies such as clash do not support forwarding ICMP), 
    # just that it returns a result, "--to-destination" can be set to a reachable address.
    ${iptables_wait} -t nat -I OUTPUT -d ${Clash_fake_ip_range} -p icmp -j DNAT --to-destination 127.0.0.1
    ${iptables_wait} -t nat -I PREROUTING -d ${Clash_fake_ip_range} -p icmp -j DNAT --to-destination 127.0.0.1
}

stop_tproxy() {
  ip rule del fwmark ${mark_id} table ${mark_id}
  ip route del local default dev lo table ${mark_id}
  ip -6 rule del fwmark ${mark_id} table ${mark_id}
  ip -6 route del local default dev lo table ${mark_id}

  ${iptables_wait} -t mangle -D PREROUTING -j CLASH_EXTERNAL
    
  ${iptables_wait} -t mangle -D PREROUTING -p tcp -m socket -j DIVERT

  ${iptables_wait} -t mangle -D OUTPUT -j CLASH_LOCAL

  ${iptables_wait} -t mangle -F CLASH_EXTERNAL
  ${iptables_wait} -t mangle -X CLASH_EXTERNAL

  ${iptables_wait} -t mangle -F CLASH_LOCAL
  ${iptables_wait} -t mangle -X CLASH_LOCAL

  ${iptables_wait} -t mangle -F DIVERT
  ${iptables_wait} -t mangle -X DIVERT

  ${iptables_wait} -D OUTPUT -d 127.0.0.1 -p tcp -m owner --uid-owner 0 --gid-owner 3005 -m tcp --dport ${Clash_tproxy_port} -j REJECT

  ${iptables_wait} -t nat -D PREROUTING -j CLASH_DNS_EXTERNAL

  ${iptables_wait} -t nat -D OUTPUT -j CLASH_DNS_LOCAL

  ${iptables_wait} -t nat -F CLASH_DNS_EXTERNAL
  ${iptables_wait} -t nat -X CLASH_DNS_EXTERNAL

  ${iptables_wait} -t nat -F CLASH_DNS_LOCAL
  ${iptables_wait} -t nat -X CLASH_DNS_LOCAL

  ${iptables_wait} -t nat -D OUTPUT -d ${Clash_fake_ip_range} -p icmp -j DNAT --to-destination 127.0.0.1
  ${iptables_wait} -t nat -D PREROUTING -d ${Clash_fake_ip_range} -p icmp -j DNAT --to-destination 127.0.0.1

  ${ip6tables_wait} -t mangle -D PREROUTING -j CLASH_EXTERNAL
    
  ${ip6tables_wait} -t mangle -D PREROUTING -p tcp -m socket -j DIVERT

  ${ip6tables_wait} -t mangle -D OUTPUT -j CLASH_LOCAL

  ${ip6tables_wait} -t mangle -F CLASH_EXTERNAL
  ${ip6tables_wait} -t mangle -X CLASH_EXTERNAL

  ${ip6tables_wait} -t mangle -F CLASH_LOCAL
  ${ip6tables_wait} -t mangle -X CLASH_LOCAL

  ${ip6tables_wait} -t mangle -F DIVERT
  ${ip6tables_wait} -t mangle -X DIVERT

  ${ip6tables_wait} -D OUTPUT -d ::1 -p tcp -m owner --uid-owner 0 --gid-owner 3005 -m tcp --dport ${Clash_tproxy_port} -j REJECT

}

detected_port() {
  sleep 1
  if [ "${port_detect}" == "true" ]; then
    if ! (${scripts_dir}/clash.tool -p); then
      return 0
    fi
  else
    log "[info] skip!! port detected。"
  fi
}

if [ "${mode}" != "core" ] ; then
while getopts ":sk" signal ; do
  case ${signal} in
    s)
      ${scripts_dir}/clash.tool -f
      ${scripts_dir}/clash.tool -v
      stop_tproxy >> /dev/null 2>&1
      stop_redirect >> /dev/null 2>&1
      forward -D >> /dev/null 2>&1
      sleep 0.75
      detected_port
      if [ "${network_mode}" = "UDP" ] ; then
        if (zcat /proc/config.gz | grep -q TPROXY) ; then
          log "[info] use TPROXY:TCP+UDP."
          log "[info] creating iptables transparent proxy rules."
          start_tproxy && log "[info] create iptables transparent proxy rules done." || log "[error] create iptables transparent proxy rule failed."
        else
          log "[warning] the device does not support TPROXY, please switch network_mode."
          log "[info] use REDIRECT:TCP."
          log "[info] creating iptables transparent proxy rules."
          start_redirect && log "[info] create iptables transparent proxy rules done." || log "[error] create iptables transparent proxy rule failed."
        fi
      else
        [ "${network_mode}" = "TCP" ] && log "[info] use REDIRECT:TCP." || log "[info] use MIXED:TCP+TUN."
        log "[info] creating iptables transparent proxy rules."
        start_redirect && log "[info] create iptables transparent proxy rules done." || log "[error] create iptables transparent proxy rule failed."
        forward -I
      fi
      ;;
    k)
      log "[warning] cleaning up iptables transparent proxy rules."
      stop_tproxy
      stop_redirect
      forward -D
      log "[warning] clean up iptables transparent proxy rules done."
      ;;
    ?)
      echo ""
      ;;
  esac
done
else
while getopts ":sk" signal ; do
  case ${signal} in
    s)
      stop_tproxy >> /dev/null 2>&1
      stop_redirect >> /dev/null 2>&1
      forward -D >> /dev/null 2>&1
      forward -I
      log "[info] mode: ${mode} disable transparent proxy."
      ;;
    k)
      stop_tproxy
      stop_redirect
      forward -D
      log "[warning] cleaning up proxy rules."
      ;;
    *)
      echo "$0:  usage: $0 {enable|disable}"
      ;;
  esac
done
fi
